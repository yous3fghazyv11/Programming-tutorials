#+TITLE: Hello, World!
#+AUTHOR: Yousef Ghazy
#+DESCRIPTION: hello world in C++
#+OPTIONS: toc:2

* الفهرس :toc:
- [[#مقدمه-الفيديو][مقدمه الفيديو]]
- [[#طباعه-hello-world][طباعه 'hello, world']]
  - [[#عمليه-الطباعه-وال-standard-output][عمليه الطباعه وال standard output]]
  - [[#الاستدعاء-او-include][الاستدعاء او include]]
  - [[#ال-main-function][ال main function]]
- [[#ال-compilation][ال compilation]]
  - [[#ازاي-نشغل-البرنامج][ازاي نشغل البرنامج؟]]
  - [[#جرب-بقا-تعمل-compile][جرب بقا تعمل compile]]
  - [[#الerrors][الerrors]]

* مقدمه الفيديو
الفيديو دا احنا هنكتب اول برنامج لينا بال++C وهو هيكون برنامج بيكتب جمله "!Hello, World" علي شاشه الterminal،
وعلشان نعمل دا هنتعلم عن شويه مفايهم اساسيه لأي برنامج ++C.
ولكن حتي برنامج بسيط زي دا هيبقي فيه تطبيق لمفاهيم برمجيه كتير ومعقده، علشان كدا احنا هنشرح معظمها بشكل هش
وطفيف اوي. الهدف من الفيديو دا هو اننا نفهم ازاي بنبني برنامج بسيط جدا بال++C
ومش ضروري اطلاقا نبقي فاهمين كل حاجه بعمق، لأن كدا كدا في فيديوهات جايه احنا هنرجع تاني لكل المواضيع اللي ذكرناها
في الفيديو دا وندرسها بتعمق اكتر بكتير
هتلاحظ برضو اني ساعات كتير بستخدم مصطلحات انا لسه مشرحتش معناها، يعني حرفيا بقول كلام انت مش فاهمه، وده
مقصود، لأنك مؤقتا هتبقي بتقول مثلا علي الcout (ودي حاجه هنشوفها دلوقتي) انه object وانت اصلا متعرفش يعني ايه
object، بس لما نخش في الobject oriented programming في فيديوهات متقدمه ونشرح يعني ايه فعلا object مخك
هيبدأ بشكل تلقائي يربط الدنيا ببعضها.
الموضوع هيبقي صعب شويه في الاول بس هتتعود عليه، لحد لما نوصل لفيديوهات متقدمه شويه وندرس المفاهيم دي بتعمق
اكتر وساعتها هيبان فايده اني اسمي كل حاجه بأسمها بدل من اني احاول ابسطلك الدنيا
* طباعه 'hello, world'
علشان نعمل برنامج بيطبع hello world في ++C هنكتب دا:

#+begin_src C++
#include <iostream>

int main()
{
    std::cout << "Hello, World!";
    return 0;
}
#+end_src

وخلينا نبدأ نناقش كل سطر من البرنامج دا بيعمل ايه
** عمليه الطباعه وال standard output
البرنامج بتاعنا بالكامل بيتلخص في السطر دا

#+begin_src C++
std::cout << "Hello, World!";
#+end_src

دا السطر اللي نقدر نقول عليه بيعمل حاجه فعلا في البرنامج دا
اللي السطر دا بيعمله باختصار انه بينادي علي object اسمه =cout= واللي هو اختصار ل character output وده object متعرف في الiostream اللي هو جذء من ال C++ standard library علشان كدا
احتاجنا نسبقه ب =::std= وبيدخله ال string اللي اسمه "!Hello, World!\n" عن طريق ال operator =>>= واللي بيتقال عليه put to وهنا كلمه string معناها سلسله من الحروف او string of
characters، وأي string هتدخله لل =cout= باستخدام ال put to operator او =>>= هيطبعها عندك في ال Terminal، فهو هيطبع "!Hello, World" لل standard output واللي هو ال terminal 

يعني السطر دا بيتقرأ: انا عايز احط الstring اللي هو "hello world" في الcout object

وبعد كدا بنحط simicolon في اخر السطر علشان نعرف الcompiler ان الجمله البرمجيه دي خلصت

** الاستدعاء او include
ال =cout= دا واحد من حاجات كتير تقدر تستخدمها علشان تتعامل مع ال input output streams في ال ++C، وعلشان
نستدعي الحاجات دي كلها ونقدر نستخدمها في البرنامج بتاعنا لازم نكتب سطر مميز كدا اسمه preprocessor directive:

#+begin_src C
#include <iostream>
#+end_src

كل اللي السطر دا بيعمله انه بيقول انه عايز يستدعي او يinclude ملف اسمه iostream، وهنا iostream اختصار ل input/output stream، الملف دا بيحتوي علي حاجات كتير احنا هنبقي عايزين نستخدمها
علشان نتعامل مع الinput والoutput في برامجنا، في حالتنا مثلا احنا عايزينه علشان نقدر نستخدم الcout اللي هنعمل بيه عمليه الطباعه اساسا، ولو جربنا نمسح السطر بتاع الinclude دا هتلاقي ايرور طلعلك اول لما تيجي تشغل البرنامج ان ال++C مش عارفه يعني ايه cout دي.
وال iostream ما هو الا ملف ++C عادي، ولكنه مش مصمم علشان يتم تنفيذه مباشره، من الاخر مهواش برنامج بيعمل حاجه بذاته، بل معمول علشان يتم استدعائه بالشكل اللي انت شفته دا ويتم استخدامه في برامج تانيه، وملف زي دا كدا عاده بنقول عليه اسم lib او مكتبه، ليه الأسم دا بالتحديد؟ معنديش ادني فكره، هم غالبا اتفقوا علي التسميه دي عقود قبل ما انا اتولد، بس المهم بنسبالنا اننا نبقي عارفين ان لما بنقول library احنا قصدنا علي اكواد جاهزه نقدر نستعديها ونستخدمها في برامجنا، وفي حاله الiostream فا ده جذء من حاجه اسمها standard library وعاده بيتقال عليها stdlib كأختصار، ودي بتبقي الlibrary اللي بتنزلك مع ال++C وبتبقي موجوده مع اي implementation لل++C

** ال main function
نيجي بقا للmain function، في ال++C وحده تكوين البرنامج بيتقال عليها statement، حاجه كدا مثلا زي الoutput statement اللي احنا شفناها دي، بالعربي ممكن نقول عليها جمله برمجيه
ودي نقدر نقول عليها امر كامل قائم بذاته بنديه للcompiler علشان يعمل فعل معين، ومعظمهم بينتهوا بsimicolon زي ما شفنا

وفي ال++C، الstatements دي عاده بنجمعها مع بعضها في حاجات اسمها functions.
الfunction هي مجرد مجموعه من الstatements او التعليمات او الجمل البرمجيه اللي بنجمعهم مع بعضهم ونديلهم اسم معين، ونقدر بعد كدا نستخدم الfunction دي بأسمها دا وننفذ الstatements اللي فيها statement ورا التانيه من فوق لتحت.

ولكن في function مميزه اسمها main لازم تبقي موجوده في كل برنامج ++C بنعمله، اول لما بتشغل البرنامج ال operating system بيexecute الfunction اسمها main، بمعني انه بينفذ التعليمات اللي فيها
علشان كدا كل برنامج معمول بال ++C لازم يكون فيه main واحده، مينفعش اكتر من واحده ومينفعش تبقي مش موجوده خالص، ودي اللي بتحط جواها الكود اللي انت عايزه يتنفذ

علشان نشرح ال main بتفصيل اكتر هنحتاج نشرح ال functions، فخلينا نأجل دا لكمان محاضرتين تلاته كدا ولا حاجه ولحد ساعتها تخيل بس ان كل الكود اللي انت عايزه يتنفذ هتكتبه جوا ال main

ولما بقول جوا الmain انا قصدي جوا الcurly braces بتاعتها، اي كود بتكتبه جوا curly braces في ال++C بيتقال عليه block، والblock اللي قدامنا دا بيتقال عليه الbody بتاع الmain، ودا اللي بيبقي فيه التعليمات اللي هتتنفذ فعلا لما الfunction دي تget executed

ولما ايexecutable program يخلص execution لازم يرجع قيمه للoperating system، القيمه دي هتحدد ما اذا كان البرنامج اشتغل بشكل كويس ولا لا، في حاله الزيرو تحديدا، فهو بيقول للos ان
البرنامج بتاعنا اشتغل وعمل المطلوب منه وخلص بدون اي مشاكل، في المستقبل ممكن نلاقي نفسنا بنرجع قيم تانيه زي 1 مثلا علشان نقول ان لا في مشكله حصلت اثناء تنفيذ البرنامج

السطر بتاع الreturn 0 دا ممكن منكتبوش عادي، لأن هنا اللي بيرجع ال0 هو الmain function، والmain function فيها حاجه مميزه ان في حاله اننا مخترناش قيمه نرجعها للoperating system سواء بقا كانت زيرو او غيره هي من نفسها بشكل تلقائي بترجع زيرو، فا احنا ممكن نشيل السطر دا تماما والبرنامج مش هيتأثر

* ال compilation
** ازاي نشغل البرنامج؟
[[../images/compilation.png]]

الـ ++C لغة compiled، يعني علشان تشغل برنامج، لازم الأول تترجم الكود اللي انت كتبته (اللي هو بيبقى بلغة مفهومة للبني آدمين) لحاجة الكمبيوتر يقدر “يفهمها”. الترجمة دي بيعملها برنامج اسمه الـ compiler.

الحاجة اللي انت بتكتبها دي اسمها source code، والحاجة اللي الكمبيوتر بيشغلها بعد الترجمة اسمها object code أو machine code.

عادةً، ملفات الـ ++C اللي انت بتكتب فيها الكود بتبقى امتدادها cpp. زي مثلًا:
hello_world.cpp

بعد ما الكومبايلر يترجمها، بيطلع ملف تاني اسمه object file وبيبقى امتداده obj. لو انت على ويندوز، أو o. لو على لينكس.

كلمة "code" كده لوحدها ممكن تبقى غامضة، وممكن تلخبط، علشان كده خلي بالك وانت بتستخدمها، واستخدمها بس لما يكون باين من السياق انت تقصد إيه.
وإحنا هنا لما نقول "code" بنقصد غالبًا الـ source code (يعني الكود اللي انت كتبته)، أو أحيانًا "الكود من غير الكومنتات"، علشان الكومنتات دي معمولة بس علشان إحنا نقراها، ومش بيشوفها الكومبايلر أصلاً.

الكومبايلر بياخد الكود اللي انت كتبته، ويحاول يفهمه. بيشوف هل البرنامج مكتوب بشكل نحوي (syntax) صح؟ هل كل كلمة ليها معنى؟ وهل فيه أي حاجة غلط ممكن تتكشف من غير ما يشغل البرنامج؟

وهتكتشف إن الكومبايلر بيبقى دقيق جدًا في النحو (syntax). لو نسيت أي تفصيلة صغيرة، زي مثلًا ما كتبتش سيمي كولون =;= أو قوس ={ }= أو نسيت تضم ملف =include#= هتلاقي البرنامج وقع منك وطلعلك error.

وكمان، الكومبايلر مش بيتسامح خالص مع الغلطات الإملائية، يعني لو كتبت اسم غلط أو نسيت حرف في دالة، مش هيعديها.

** جرب بقا تعمل compile
طب هل احنا كل مره هنعمل تعديل علي البرنامج بتاعنا هنقعد نكتب الكلام دا كله؟ وبعدين دا احنا عندنا هنا اصلا project صغير من ملف واحد، امال لو كان project كبير فيه ملفات كتير وlibraries كتير كنا هنعمل ايه.
عندنا برامج بيتقال عليها build systems او build automation tools، منهم مثلا برنامج احنا هنستخدمه دلوقتي اسمه make، ودا برنامج هيسهل علينا عمليه الbuilding والcompilation.


#+begin_src makefile
%: %.cpp
	g++ $< -o $@ -std=c++17 -Wall -Wextra -Werror -pedantic
#+end_src

** الerrors
تعالي نحاول نكتب شويه امثله كدا فيها شويه اخطاء او errors ونشوف الcompiler يقول عليها ايه.

***** جرب تشيل الinclude iostream

***** جرب تشيل ال::std

***** جرب تشيل ال" اللي في اخر الstring

***** جرب تلعب في ترتيب السطور

***** جرب تلزق int في main

***** جرب تحط white spaces، تشيل white spaces، تلزق البرنامج كله في بعضه، تحط ١٠ بين كل كلمه
الcompiler كل اللي هو محتاجه ان يكون في مسافه بين كل كلمه والتانيه علشان يعرف يفرقهم عن بعض، انما مش بيهتم اوي انت حاطط كام white space

جرب تنسي simicolon
