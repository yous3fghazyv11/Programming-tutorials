#+TITLE: Hello, World!
#+AUTHOR: Yousef Ghazy
#+DESCRIPTION: hello world in C++
#+OPTIONS: toc:2

* الفهرس :toc:
- [[#ايه-هي-البرمجه][ايه هي البرمجه؟]]
- [[#طباعه-hello-world][طباعه 'hello, world']]
  - [[#ال-comments][ال comments]]
  - [[#عمليه-الطباعه-وال-standard-output][عمليه الطباعه وال standard output]]
  - [[#الاستدعاء-او-include][الاستدعاء او include]]
  - [[#ال-main-function][ال main function]]
- [[#ال-compilation][ال compilation]]
  - [[#اولا-يعني-ايه-compiler][اولا يعني ايه compiler؟]]
  - [[#الerrors][الerrors]]
  - [[#عمليه-الlinking][عمليه الLinking]]
- [[#أنواع-الerrors][أنواع الerrors]]

* ايه هي البرمجه؟
علشان تخلي الكمبيوتر يعمل حاجة، لازم انت (أو أي حد غيرك) تقوله بالظبط — وبأدق التفاصيل — يعمل إيه. والوصف ده اللي بيقول "يعمل إيه" اسمه برنامج (program)، والبرمجة (programming) هي عمليه كتابه البرامج دي.

بالتالي إحنا كلنا برمجنا قبل كده بطريقة أو بأخرى، بس مش برمجه كمبيوترات. يعني مثلًا، لما تيجي توصف لحد إزاي يروح السينما، أو فين الحمام، أو تسخّن الأكل في الميكروويف، فأنت كده عملتله "برنامج" او تعليمات يمشي عليها علشان ينفذ المهمه دي.

الفرق بقى بين الوصف اللي بنقوله كبني آدمين وبين البرنامج اللي بتكتبه للكمبيوتر هو درجة الدقة. إحنا البشر ممكن نعوض النقص في التعليمات ونفهم بالبديهة، لكن الكمبيوتر مايعرفش يعمل كده.

يعني مثلًا، لو حد قالك وهو بيوصفلك مكان الحمام:

"لف يمين في الطرقة، واطلع السلم، هتلاقيه على شمالك"

الوصف ده بالنسبالك كويس وهتفهمه، لكن لو بصيت عليه كويس هتلاقي الجملة دي لغويًا مش مظبوطة قوي، وكمان فيها حاجات ناقصة.

بس البني آدم بيعرف يكمل التعليمات دي لوحده.

يعني مثلًا، لو أنت قاعد على ترابيزة وسألت حد على طريق الحمام، مش محتاج يقولك:

"قوم من على الكرسي"

"خلي بالك ماتخبطش في الترابيزة"

"متدوسش علي القطة اللي نايمة عالأرض"

كل الحاجات دي إنت بتفهمها لوحدك، بالبديهة.

لكن الكمبيوتر؟ لأ، لازم تقول له كل تفصيلة صغيرة وإلا مش هيعرف يعمل المطلوب خالص.

علي عكس البشر، الكمبيوترات غبية جدًا. لازم كل حاجة تتوصف لها بدقة وبالتفصيل.

فكر تاني في الجملة: "لف يمين في الطرقة، واطلع السلم، هتلاقيه على شمالك."

فين الطرقة؟ يعني إيه طرقة؟ يعني إيه "لف يمين"؟ فين السلم؟ إزاي أطلع السلم؟
(درجة درجة؟ كل درجتين مع بعض؟ أزحف على الدرابزين؟)
وإيه اللي على شمالي؟ وإمتى هيكون على شمالي؟

علشان نعرف نوصف "الحاجات" دي بدقة للكمبيوتر، إحنا محتاجين لغة مُعرفة بدقة وليها قواعد نحوية واضحة (الإنجليزي عشوائي زيادة عن اللزوم للكلام ده)،
وكمان محتاجين مفردات محددة للحاجات اللي عايزين الكمبيوتر يعملها.

اللغة دي اسمها لغة برمجة (programming language)، و++C هي واحدة من لغات البرمجة الكتير جدا اللي عملناها علشان نقدر نكتب بيها تعليمات ينفذها الكمبيوتر.

ولما تلاقي كمبيوتر بيعمل مهمة معقدة من تعليمات بسيطة، فده معناه إن في حد علمه يعمل كده عن طريق إنه كتب له برنامج.

تعالي اما نشوف ابسط برنامج ممكن نعمله بال ++C والأدوات اللي هنستخدمها علشان نعمله
* طباعه 'hello, world'
دائما اول برنامج بنعمله في اي لغه برمجه جديده بيكون مجرد برنامج بسيط مهمته انه يطبع 'Hello, World' في ال standard output مثلا زي كدا

[[../images/hello_world_exec.png]]

طبعا الكلام دا من جوا ال terminal والرموز =$ code/~= دي اسمها prompt ومعناها انه مستني مني input، فانا دخلتله =hello_world/.= علشان اقوله يعمل execute للبرنامج اللي اسمه hello world، لو هتعمل دا من برا الترمينال فانت هيبقي عندك ملف اسمه hello world هتعمل عليه double click هيفتحلك ال terminal وهيكتبلك جواها '!Hello, World'

هنا علامه ال =/.= دي زي بظبط ما تكون بتعمل double click علي برنامج اسمه ~hello world.exe~ مثلا، دي حرفيا بتقول لل shell بتاعي execute this file

علشان نعمل برنامج زي كدا في ++C هنحتاج نكتب الكود دا:

#+begin_src C++
// Simple program to print out "Hello, World!" in the standard output (terminal)

#include <iostream>  // `including` the input/output stream headers from the standard library

int main() {
    std::cout << "Hello, World!\n"; // the line that actually produces the output
    return 0;  // exit status returned to the operating system from our program, zero indicates successs
}
#+end_src

وخلينا نبدأ نناقش كل سطر من البرنامج دا بيعمل ايه
** ال comments
خلينا نبدأ نشرح السطر دا

#+begin_src C++
// Simple program to print out "Hello, World!" in the standard output (terminal)
#+end_src

السطر دا اسمه =comment= ، اي حاجه بتبدأ بعد علامه =//= او اتنين سلاش بتبقي comment، وال comments مش تعليمات بتتنفذ من قبل ال compiler، لاحظ انها اصلا مجرد كلام انجليزي عادي، هي مجرد كلام بنكتبه علشان المبرمج اللي بيقرأ الكود، واحنا هنا استخدمنا ال comments علشان نوضحلك البرنامج دا بيعمل ايه

#+begin_src C++
std::cout << "Hello, World!\n"; // the line that actually produces the output
#+end_src

لاحظ برضو في السطر دا في comment بعد ال =//=
واول حاجه عايزك تاخد بالك منها هي انك تقدر تكتب comments في نفس السطر اللي فيه الكود عادي بس لازم يكون في اخر السطر بعد لما خلصت الكود، لأن كل حاجه بعد ال =//= هتعتبر comment ولو عملت comment قبل ما الكود يخلص هتتفاجئ ان الكود بتاعك مش بيتقرأ ومش بيتنفذ، لحسن الحظ معظم ال IDEs وال Text Editors بيعملوا ال comments ب font معين يخلينا نقدر ناخد بالنا لو حاجه زي دي حصلت، بص مثلا المثال دا:

#+begin_src C++
std::cout << // "Hello, World!\n";
#+end_src

لو جربت تشغل الكود دا هيطلعلك error، لأن زي ما قلنا كل حاجه بعد ال =//= هتبقي comment لحد اخر السطر

ممكن تحس ان الكومنتس ملهاش لازمه ومش هتحتاج تكتبها في الكود بتاعك. بس في الحقيقه انك *هتحتاج* تكتب comments في الكود بتاعك، وحتي في الامثله اللي هتشوفها في الكتاب دا، هتلاقي اكواد كتير انا بحط عليها comments علشان اشرحلك الاكواد دي بتعمل ايه، من غير ال comments ممكن كنت هتواجه صعوبه في الفهم، وكذلك لو انت بتقرأ كود حد تاني كاتبه، ممكن تلاقي نفسك بتشتم اللي كاتب الكود بسبب انه مش كاتب comments بتشرح الكود بيعمل ايه، بس كتابه ال comments مش سهله، معظم الناس بتكتب comments لمجرد انها يبقي اسمها كتبت comments، في احد الفيديوهات المتقدمه انا هشرح ازاي تكتب comments صح. وزي ما دايما بنقول، سهل تكتب كود يفهمه الكمبيوتر بس صعب تكتب كود يفهمه البني ادم. واحنا عندنا في البرمجه بنحاول نركز اوي علي حوار ان الكود بتاعنا يبقي convenient بقدر الامكان للhuman reader

** عمليه الطباعه وال standard output
بغض النظر عن ال comments، خلينا نشوف السطر دا بتعمق اكتر

#+begin_src C++
std::cout << "Hello, World!\n";
#+end_src

انا شيلت الكومنت علشان ميبقاش مصدر الهاء ونقدر نركز علي السطر نفسه

اللي السطر دا بيعمله باختصار انه بينادي علي object اسمه =cout= واللي هو اختصار ل character output وده object متعرف في ال C++ standard library علشان كدا احتاجنا نسبقه ب =::std= وبيدخله ال string اللي اسمه "!Hello, World!\n" عن طريق ال operator =>>= واللي بيتقال عليه put to وهنا كلمه string معناها سلسله من الحروف او string of characters، وأي string هتدخله لل =cout= باستخدام ال put to operator او =>>= هيطبعها عندك في ال Terminal، فهو هيطبع "!Hello, World" لل standard output واللي هو ال terminal وبعد كدا بينزل سطر،

يعني السطر دا بيتقرأ: =put "Hello, World\n" to the cout object=

بمعني انه هيطبع الحروف: ='!' ,'H', 'e', 'l', 'l', 'o', ',', ' ', 'W', 'o', 'r', 'l', 'd'= وبعدها هيقوم طابع الحرف =n\= وده هيخليه ينزل سطر، منغير ال =n\= البرنامج هيعمل كدا:

[[../images/hello_world_no_newline.png]]

طبعا احنا مش عايزين دا فهنحط ال =n\= بتاعتنا عادي

الروش هنا بقا ان =n\= دي حرف واحد، اسمها newline character ودي بتندرج تبع مجموعه من الحروف اللي اسمهم escape characters، وكلهم بيبدؤا ب =\= واحنا لحد الان احنا مش محتاجين نعرف اي escape characters تانيه غير ال =n\= بس بعد كدا هنلاقي نفسنا محتاجين نستخدم كتير منهم غير ال =n\=

** الاستدعاء او include
ال object بتاعنا اللي اسمه =cout= مهواش جاي مع ال core بتاع ال ++C،
لأن ال =cout= دا واحد من حاجات كتير تقدر تستخدمها علشان تتعامل مع ال input output streams في ال ++C، وعلشان نستدعي الحاجات دي كلها ونقدر نستخدمها في البرنامج بتاعنا لازم نكتب السطر دا:

#+begin_src C
#include <iostream>
#+end_src

كل اللي السطر دا بيعمله انه بيقول انه عايز يستدعي او يinclude ملف اسمه iostream، وهنا iostream اختصار ل input/output stream ودا عباره عن ملف متعرف فيه (Declaration) كتير من الحاجات اللي احنا هنبقي عايزين نستخدمها علشان نتعامل مع ال input وال output بتاعنا في حاله البرامج اللي بتشتغل في ال terminal زي مثلا ال =cout= اللي احنا بنستخدمه علشان نطبع حاجه في ال standard output او ال terminal

طبعا انت غالبا بتسأل دلوقتي، بيستدعيه ازاي بظبط؟

اولا ال iostream ما هو الا ملف ++C عادي، ولكنه مش مصمم علشان يتم تنفيذه مباشره، بل معمول علشان يتم استدعائه بالشكل اللي انت شفته دا ويتم استخدامه في برامج تانيه، وده بيقال عليه header file او library ولما بتستدعي الملف دا، كل اللي بيحصل ان محتواه حرفيا بيتاخد copy paste للملف بتاعك وبتقدر تستخدم الحاجات اللي متعرفه جواه

طيب ليه ميبقاش الcout وباقي الحاجات بتاعه التعامل مع الinput والoutput جايه مع الcore بتاع اللغه بدل ما انا محتاج اني استدعي مكتبه علشان استخدمهم؟

في لغات كتير بتخلي ال functions بتاعه الطباعه جذء من ال core بتاع اللغه، علي سبيل المثال في python انت لو عايز تطبع حاجه هتكتب الأمر دا:

#+begin_src python
print("Hello, World!")
#+end_src

اول حاجه هتلاحظ ان مفيش =n\= وده لأن الطباعه في python من نفسها بتنزل سطر بعد لما تخلص طباعه ال string

تاني حاجه هتلاحظها اننا مش محتاجين نعمل include لحاجه علشان نطبع، ال function اللي اسمها =()print= جايه مع ال core بتاع اللغه، وده قد يبدو شيئ كويس، بس في الحقيقه هو مش كويس اوي ومش وحش اوي، يمكن ال ++C احسن علشان بتخليك تستدعي او ت include ال iostream علشان تستخدم ال objects المسؤوله عن التعامل مع ال input وال output وخليني اشرحلك ليه

في ++C ال iostream مش مجرد ملف صغير كدا بيديلك ال =cout= وخلاص، الحقيقه ان ال iostream ملف ضخم جدا بيتكون من عشرات الألاف من السطور، ممكن هو نفسه مش عشرات الألاف من السطور ولكنه جواه بيستعدي ملفات تانيه برضو، ولما بستدعيه مش بيديلك بس ال cout، لا دا كمان بيديلك حاجات تانيه كتير جدا تقدر تستخدمها علشان تتعامل مع ال standard input/output stream من خلال ال terminal

لو عايز تعمل برنامج بيشتغل جوا ال terminal او command line interface (cli) application وبياخد input من اليوزر عن طريق ال standard input او ال keyboard او بيطبع output في ال terminal او ال standard output لازم هتحتاج تستخدم ال iostream

بس في نفس الوقت لو انت مش بتعمل برنامج بيشتغل في ال terminal زي مثلا برنامج ب graphical user interface (gui) او لو بتعمل برنامج بيشتغل في ال terminal بس مش بيطلع حاجه وبيشتغل في صمت وبرضو مش بياخد منك input معين، انت مش هتبقي محتاج ال iostream والحاجات الكتير اللي فيه وفي الحاله دي انت مش هتبقي عايز يبقي في حوالي 50 الف سطر كود في البرنامج بتاعك موجودين بدون سبب، لأنك مش هتحتاج مثلا تستخدم حاجه زي cout

فممكن كمبتدئ تحس ان انا ليه محتاج اني استخدم include علشان استدعي ال cout علشان بس اطبع حاجه علي الشاشه، بس لما مستواك يعلي وتلاقي انك بتعمل برامج مش محتاجه ال iostream هتبقي مبسوط انه مش دايما قاعد عندك في البرنامج حتي وانت مش محتاجه

ال iostream ومجموعه تانيه كبيره جدا من الheader files مع بعض بيتقال عليهم ال standard library ولما بنستخدم حاجه متعرفه فيهم بنكتب قبلها =::std=

** ال main function
ازاي الكمبيوتر بيبدأ ينفذ البرنامج؟ ومنين؟

اول لما بتشغل البرنامج ال operating system بيخش يدور علي function اسمها main وبينفذ اللي فيها علي سبيل المثال دي كانت ال main بتاعه ال hello_world.cpp:

#+begin_src C++
int main() {
    std::cout << "Hello, World!\n";
    return 0;
}
#+end_src

كل برنامج معمول بال ++C لازم يكون فيه main واحده، مينفعش اكتر من واحده ومينفعش تبقي مش موجوده خالص، ودي اللي بتحط جواها الكود اللي انت عايزه يتنفذ

علشان نشرح ال main بتفصيل اكتر هنحتاج نشرح ال functions، فخلينا نأجل دا لكمان محاضرتين تلاته كدا ولا حاجه ولحد ساعتها تخيل بس ان كل الكود اللي انت عايزه يتنفذ هتكتبه جوا ال main

لاحظ ان في اخر ال function في statement اسمها =;return 0= ودي بترجع قيمه معينه للي بينادي علي ال function، وفي حاله ال main فاللي بينادي عليها هو ال os، علشان كدا هي بترجع 0 لل os، والقيمه دي لازم تكون عدديه علشان هتلاحظ ان جنب كلمه main في int ودي معناها ان ال function دي هترجع قيمه من نوع integer او عدد صحيح. بس يعني ايه الزيرو؟ الزيرو دا معناه ان البرنامج خلص بسلام وكل حاجه مشيت زي الفل، وبيتقال عليه exit code، الزيرو هي الحاجه الوحيده اللي بتدل علي ان البرنامج خلص بسلام، اي قيمه تانيه معناها ان البرنامج حصل فيه ايرور

علي سبيل المثال لو جربنا ننفذ الكود بتاع hello_world دا هيبقي شكله كدا:

[[../images/exit_0.png]]

لاحظ ان السهمين لونهم اخضر، بس لو غيرنا ال =;return 0= وخليناها =;return 1= مثلا بالشكل دا:

#+begin_src C++
int main() {
    std::cout << "Hello, World!\n";
    return 1;
}
#+end_src

هتلاقي ان المنظر اتغير لما نيجي نشغل البرنامج:

[[../images/exit_1.png]]

هتلاقي ان البرنامج اشتغل زي الفل مفيش اي مشاكل بس مع ذلك ال shell بتاعي مخلي السهمين لونهم احمر علامه علي ان البرنامج مشتغلش كويس وعمل ايرور، مع انه اشتغل زي الفل بس علشان انت عملت =;return1=

الصوره دي هتوضح الموضوع بشكل اوضح شويه:

[[../images/exit_codes_compare.png]]

زي ما انت شايف البرنامج الاول طبع المطلوب منه وخلص والأسهم خضرا، وال output بتاع الامر =?$ echo= طالع 0، وده امر بنستخدمه علشان نعرف لو كان البرنامج اشتغل كويس ولا عمل errors

وهتلاقي علي الصعيد الاخر البرنامج التاني اللي فيه =;return 1= بدل 0 برضو قام بمهمته كويس وعمل عمليه الطباعه عادي مفيش مشكله بس الأسهم حمرا وال output بتاع الأمر =?$ echo= طالع 1 في دلاله علي ان البرنامج غالبا مشتغلش كويس

* ال compilation
انت شايفني عمال اقول compiler وعمال اشغل برامج، فخليني اتكلم شويه عن الموضوع دا
** اولا يعني ايه compiler؟
الـ ++C لغة compiled، يعني علشان تشغل برنامج، لازم الأول تترجم الكود اللي انت كتبته (اللي هو بيبقى بلغة مفهومة للبني آدمين) لحاجة الكمبيوتر يقدر “يفهمها”. الترجمة دي بيعملها برنامج اسمه الـ compiler.

الحاجة اللي انت بتكتبها دي اسمها source code، والحاجة اللي الكمبيوتر بيشغلها بعد الترجمة اسمها object code أو machine code.

عادةً، ملفات الـ ++C اللي انت بتكتب فيها الكود بتبقى امتدادها cpp. زي مثلًا:
hello_world.cpp

بعد ما الكومبايلر يترجمها، بيطلع ملف تاني اسمه object file وبيبقى امتداده obj. لو انت على ويندوز، أو o. لو على لينكس.

كلمة "code" كده لوحدها ممكن تبقى غامضة، وممكن تلخبط، علشان كده خلي بالك وانت بتستخدمها، واستخدمها بس لما يكون باين من السياق انت تقصد إيه.
وإحنا هنا لما نقول "code" بنقصد غالبًا الـ source code (يعني الكود اللي انت كتبته)، أو أحيانًا "الكود من غير الكومنتات"، علشان الكومنتات دي معمولة بس علشان إحنا نقراها، ومش بيشوفها الكومبايلر أصلاً.

الكومبايلر بياخد الكود اللي انت كتبته، ويحاول يفهمه. بيشوف هل البرنامج مكتوب بشكل نحوي (syntax) صح؟ هل كل كلمة ليها معنى؟ وهل فيه أي حاجة غلط ممكن تتكشف من غير ما يشغل البرنامج؟

وهتكتشف إن الكومبايلر بيبقى دقيق جدًا في النحو (syntax). لو نسيت أي تفصيلة صغيرة، زي مثلًا ما كتبتش سيمي كولون =;= أو قوس ={ }= أو نسيت تضم ملف =include#= هتلاقي البرنامج وقع منك وطلعلك error.

وكمان، الكومبايلر مش بيتسامح خالص مع الغلطات الإملائية، يعني لو كتبت اسم غلط أو نسيت حرف في دالة، مش هيعديها.

[[../images/compilation.png]]

** الerrors
تعالي نحاول نكتب شويه امثله كدا فيها شويه اخطاء او errors ونشوف الcompiler يقول عليها ايه.

#+begin_src C++
int main() {
    std::cout << "Hello, World!\n";
    return 0;
}
#+end_src

احنا هنا مش بنستقطع ال main من البرنامج، لا ده هو البرنامج كامل، لاحظ ان مفيش =include#= لل iostream، وده هينتج عنه ان ال compiler هيقولك يسطا انا معرفش يعني ايه std::cout دي، فخلينا نصلح الغلطه دي ونحط ال =include#= تاني

#+begin_src C++
#include <iostream>

int main() {
    std::cout << "Hello, World!\n";
    return 0;
}
#+end_src

هنا احنا صلحنا الغلطه بتاعه ال =include#= بس عملنا غلطه تانيه، احنا نسينا نكتب =::std= قبل =cout= وده هيخلي ال compiler يزعل منك جامد

#+begin_src C++
#include <iostream>

int main() {
    std::cout << "Hello, World!\n;
    return 0;
}
#+end_src

هنا احنا نسينا نقفل ال string ب ="= 

#+begin_src C++
#include <iostream>

integer main() {
    std::cout << "Hello, World!\n";
    return 0;
}
#+end_src

هنا احنا استخدمنا كلمه integer بدل int، ال compiler مش هيفهم دا

#+begin_src C++
#include <iostream>

integer main() {
    std::cout << "Hello, World!\n"
    return 0;
}
#+end_src

إحنا نسينا نحط سيمي كولون =;= في آخر جملة الطباعة.

خد بالك إن جُمل كتير في ++C لازم تنتهي بسيمي كولون.

الكمبايلر محتاج السيمي كولون علشان يعرف الجملة دي خلصت، وهيبدأ في اللي بعدها.

مفيش طريقة بسيطة وصحيحة 100% ومن غير مصطلحات معقدة تشرح إمتى بالظبط لازم تحط سيمي كولون.
لكن دلوقتي، اعمل زي ما بنعمل في الأمثلة.

** عمليه الLinking
البرنامج عادة بيتكوّن من كذا جزء منفصل، وساعات الأجزاء دي مش بتبقي مكتوبه كلها من نفس الشخص، بل ممكن اشخاص مختلفه تكتبها.
مثلًا، برنامج "Hello, World!" بيتكوّن من الجزء اللي إحنا كتبناه، زائد أجزاء تانية من مكتبة ال C++ standard library.

الأجزاء المنفصلة دي (اللي أحيانًا بنسميها Modules أو Translation Units) لازم تتترجم كل واحدة لوحدها،
وبعد كده تتربط ببعض علشان تكوّن برنامج قابل للتنفيذ (Executable Program).
البرنامج اللي بيقوم بربط الأجزاء دي اسمه Linker.

الـ Linker بيطلع حاجة اسمها ملف تنفيذي (Executable File)، وعلى ويندوز بيكون غالبًا اسمه بينتهي بـ .exe.

خد بالك إن الكود اللي طالع بعد الترجمة (Object Code) وكمان الملفات التنفيذية مش بتمشي على كل الأنظمة.
يعني لو عملت compile لكود على جهاز Windows، هتاخد كود مخصوص للويندوز، ومش هيشتغل على جهاز Linux.

[[../images/linking.png]]

المكتبة (Library) ببساطة هي شوية كود – غالبًا مكتوبه من ناس تانية – وإحنا بنستخدمها عن طريق declarations موجودة في ملف إحنا بنستورد منه.

ال Declaration هو جملة في البرنامج بتحدد إزاي نقدر نستخدم جزء معيّن من الكود.
وهنشرح الكلام دا بالتفصيل في محاضرات متقدمه.

* أنواع الerrors

عندنا كذا نوع من انواع الerrors:

+ الerrors اللي بيلاقيها الكمبايلر اسمها Compile-Time Errors
+ الerrors اللي بيلاقيها الـ Linker اسمها Link-Time Errors
+ الerrors اللي مش بتظهر غير وإنت بتشغّل البرنامج اسمها Run-Time Errors أو Logic Errors

وبشكل عام:

الerrors اللي بيكتشفها الcompiler أسهل في الفهم والإصلاح من الerrors اللي بيلاقيها الlinker.

وerrors الlinker أسهل من الRun-Time errors

وفي محاضرات متقدمه هنناقش حوار الerros دا بالتفصيل ونفهمها اكتر ونفهم ازاي نتعامل معاها.
